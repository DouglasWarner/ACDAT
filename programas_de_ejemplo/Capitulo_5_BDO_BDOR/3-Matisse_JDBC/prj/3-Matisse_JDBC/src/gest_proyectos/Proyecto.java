/*
 * Proyecto.java
 *
 * Generated with Matisse Schema Definition Language 9.1.11
 * Generation date: Tue Apr 23 18:54:50 2019
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package gest_proyectos;

import com.matisse.reflect.*;

/**
 * <code>Proyecto</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Proyecto extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.11
     * Generation Date: Tue Apr 23 18:54:50 2019
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Proyecto</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("gest_proyectos.Proyecto"));

    /**
     * Gets the <code>Proyecto</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Proyecto(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Proyecto(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Proyecto.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Proyecto.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Proyecto.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Proyecto.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'nom_proy' */

    /** Attribute <code>nom_proy</code> cache ID */
    private static int nom_proyCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("nom_proy",CID));

    /**
     * Gets the <code>nom_proy</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNom_proyAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nom_proyCID);
    }


    /**
     * Gets the <code>nom_proy</code> attribute value.
     * @return the value
     *
     * @see #setNom_proy
     * @see #removeNom_proy
     */
    public final String getNom_proy() {
        return getString(getNom_proyAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>nom_proy</code> attribute value.
     * @param val the new value
     *
     * @see #getNom_proy
     * @see #removeNom_proy
     */
    public final void setNom_proy(String val) {
        setString(getNom_proyAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>nom_proy</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNom_proy
     * @see #setNom_proy
     */
    public final void removeNom_proy() {
        removeValue(getNom_proyAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNom_proy
     * @see #setNom_proy
     */
    public final boolean isNom_proyDefaultValue() {
        return isDefaultValue(getNom_proyAttribute(getMtDatabase()));
    }


    /* Attribute 'f_inicio' */

    /** Attribute <code>f_inicio</code> cache ID */
    private static int f_inicioCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("f_inicio",CID));

    /**
     * Gets the <code>f_inicio</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getF_inicioAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(f_inicioCID);
    }


    /**
     * Gets the <code>f_inicio</code> attribute value.
     * @return the value
     *
     * @see #setF_inicio
     * @see #removeF_inicio
     */
    public final java.util.GregorianCalendar getF_inicio() {
        return getDate(getF_inicioAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>f_inicio</code> attribute value.
     * @param val the new value
     *
     * @see #getF_inicio
     * @see #removeF_inicio
     */
    public final void setF_inicio(java.util.GregorianCalendar val) {
        setDate(getF_inicioAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>f_inicio</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getF_inicio
     * @see #setF_inicio
     */
    public final void removeF_inicio() {
        removeValue(getF_inicioAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getF_inicio
     * @see #setF_inicio
     */
    public final boolean isF_inicioDefaultValue() {
        return isDefaultValue(getF_inicioAttribute(getMtDatabase()));
    }


    /* Attribute 'f_fin' */

    /** Attribute <code>f_fin</code> cache ID */
    private static int f_finCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("f_fin",CID));

    /**
     * Gets the <code>f_fin</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getF_finAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(f_finCID);
    }


    /**
     * Gets the <code>f_fin</code> attribute value.
     * @return the value
     *
     * @see #setF_fin
     * @see #removeF_fin
     */
    public final java.util.GregorianCalendar getF_fin() {
        return getDate(getF_finAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>f_fin</code> attribute value.
     * @param val the new value
     *
     * @see #getF_fin
     * @see #removeF_fin
     */
    public final void setF_fin(java.util.GregorianCalendar val) {
        setDate(getF_finAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>f_fin</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getF_fin
     * @see #setF_fin
     */
    public final void removeF_fin() {
        removeValue(getF_finAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getF_fin
     * @see #setF_fin
     */
    public final boolean isF_finNull() {
        return isNull(getF_finAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getF_fin
     * @see #setF_fin
     */
    public final boolean isF_finDefaultValue() {
        return isDefaultValue(getF_finAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'tiene_asignado' */

    /** Relationship <code>tiene_asignado</code> cache ID */
    private static int tiene_asignadoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("tiene_asignado",CID));

    /**
     * Gets the <code>tiene_asignado</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getTiene_asignadoRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(tiene_asignadoCID);
    }

    /**
     * Gets the <code>tiene_asignado</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getTiene_asignadoSize
     * @see #tiene_asignadoIterator
     * @see #setTiene_asignado
     * @see #removeTiene_asignado
     */
    public final gest_proyectos.Empleado[] getTiene_asignado() {
        return (gest_proyectos.Empleado[])getSuccessors(getTiene_asignadoRelationship(getMtDatabase()), gest_proyectos.Empleado.class);
    }

    /**
     * Counts the <code>tiene_asignado</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getTiene_asignado
     * @see #tiene_asignadoIterator
     * @see #setTiene_asignado
     * @see #removeTiene_asignado
     */
    public final int getTiene_asignadoSize() {
        return getSuccessorSize(getTiene_asignadoRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>tiene_asignado</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getTiene_asignado
     * @see #getTiene_asignadoSize
     * @see #setTiene_asignado
     * @see #removeTiene_asignado
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> tiene_asignadoIterator() {
        return this.<E>successorIterator(getTiene_asignadoRelationship(getMtDatabase()), gest_proyectos.Empleado.class);
    }

    /**
     * Sets the <code>tiene_asignado</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getTiene_asignado
     * @see #getTiene_asignadoSize
     * @see #tiene_asignadoIterator
     * @see #removeTiene_asignado
     */
    public final void setTiene_asignado(gest_proyectos.Empleado[] succs) {
        setSuccessors(getTiene_asignadoRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>tiene_asignado</code> successors list.
     * @param succ the object to add
     *
     * @see #getTiene_asignado
     * @see #getTiene_asignadoSize
     * @see #tiene_asignadoIterator
     * @see #setTiene_asignado
     * @see #removeTiene_asignado
     */
    public final void prependTiene_asignado(gest_proyectos.Empleado succ) {
        prependSuccessor(getTiene_asignadoRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>tiene_asignado</code> successors list.
     * @param succ the object to add
     *
     * @see #getTiene_asignado
     * @see #setTiene_asignado
     * @see #removeTiene_asignado
     * @see #getTiene_asignadoSize
     * @see #tiene_asignadoIterator
     */
    public final void appendTiene_asignado(gest_proyectos.Empleado succ) {
        appendSuccessor(getTiene_asignadoRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>tiene_asignado</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getTiene_asignado
     * @see #setTiene_asignado
     * @see #removeTiene_asignado
     * @see #getTiene_asignadoSize
     * @see #tiene_asignadoIterator
     */
    public final void appendTiene_asignado(gest_proyectos.Empleado[] succs) {
        addSuccessors(getTiene_asignadoRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>tiene_asignado</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getTiene_asignado
     * @see #setTiene_asignado
     * @see #getTiene_asignadoSize
     * @see #tiene_asignadoIterator
     */
    public void removeTiene_asignado(gest_proyectos.Empleado[] succs) {
        removeSuccessors(getTiene_asignadoRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>tiene_asignado</code> successors list.
     * @param succ the object to remove
     *
     * @see #getTiene_asignado
     * @see #setTiene_asignado
     * @see #getTiene_asignadoSize
     * @see #tiene_asignadoIterator
     */
    public void removeTiene_asignado(gest_proyectos.Empleado succ) {
        removeSuccessor(getTiene_asignadoRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>tiene_asignado</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearTiene_asignado() {
        clearSuccessors(getTiene_asignadoRelationship(getMtDatabase()));
    }


    /* Relationship 'jefe_proyecto' */

    /** Relationship <code>jefe_proyecto</code> cache ID */
    private static int jefe_proyectoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("jefe_proyecto",CID));

    /**
     * Gets the <code>jefe_proyecto</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getJefe_proyectoRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(jefe_proyectoCID);
    }

    /**
     * Gets the <code>jefe_proyecto</code> sucessor object.
     * @return an object 
     *
     * @see #setJefe_proyecto
     * @see #clearJefe_proyecto
     */
    public final gest_proyectos.EmpleadoPlantilla getJefe_proyecto() {
        return (gest_proyectos.EmpleadoPlantilla)getSuccessor(getJefe_proyectoRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>jefe_proyecto</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getJefe_proyecto
     * @see #clearJefe_proyecto
     */
    public final void setJefe_proyecto(gest_proyectos.EmpleadoPlantilla succ) {
        setSuccessor(getJefe_proyectoRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>jefe_proyecto</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearJefe_proyecto() {
        clearSuccessors(getJefe_proyectoRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Proyecto(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Proyecto]";
    }
}
