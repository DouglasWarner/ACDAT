/*
 * EmpleadoPlantilla.java
 *
 * Generated with Matisse Schema Definition Language 9.1.11
 * Generation date: Tue Apr 23 18:54:50 2019
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package gest_proyectos;

import com.matisse.reflect.*;

/**
 * <code>EmpleadoPlantilla</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class EmpleadoPlantilla extends gest_proyectos.Empleado {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.11
     * Generation Date: Tue Apr 23 18:54:50 2019
     */

    /*
     * Class variables and methods
     */

    /** Class <code>EmpleadoPlantilla</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("gest_proyectos.EmpleadoPlantilla"));

    /**
     * Gets the <code>EmpleadoPlantilla</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public EmpleadoPlantilla(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected EmpleadoPlantilla(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(EmpleadoPlantilla.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, EmpleadoPlantilla.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(EmpleadoPlantilla.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, EmpleadoPlantilla.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'num_emp' */

    /** Attribute <code>num_emp</code> cache ID */
    private static int num_empCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("num_emp",CID));

    /**
     * Gets the <code>num_emp</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNum_empAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(num_empCID);
    }


    /**
     * Gets the <code>num_emp</code> attribute value.
     * @return the value
     *
     * @see #setNum_emp
     * @see #removeNum_emp
     */
    public final String getNum_emp() {
        return getString(getNum_empAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>num_emp</code> attribute value.
     * @param val the new value
     *
     * @see #getNum_emp
     * @see #removeNum_emp
     */
    public final void setNum_emp(String val) {
        setString(getNum_empAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>num_emp</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNum_emp
     * @see #setNum_emp
     */
    public final void removeNum_emp() {
        removeValue(getNum_empAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNum_emp
     * @see #setNum_emp
     */
    public final boolean isNum_empDefaultValue() {
        return isDefaultValue(getNum_empAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'gestiona' */

    /** Relationship <code>gestiona</code> cache ID */
    private static int gestionaCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("gestiona",CID));

    /**
     * Gets the <code>gestiona</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getGestionaRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(gestionaCID);
    }

    /**
     * Gets the <code>gestiona</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getGestionaSize
     * @see #gestionaIterator
     * @see #setGestiona
     * @see #removeGestiona
     */
    public final gest_proyectos.Proyecto[] getGestiona() {
        return (gest_proyectos.Proyecto[])getSuccessors(getGestionaRelationship(getMtDatabase()), gest_proyectos.Proyecto.class);
    }

    /**
     * Counts the <code>gestiona</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getGestiona
     * @see #gestionaIterator
     * @see #setGestiona
     * @see #removeGestiona
     */
    public final int getGestionaSize() {
        return getSuccessorSize(getGestionaRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>gestiona</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getGestiona
     * @see #getGestionaSize
     * @see #setGestiona
     * @see #removeGestiona
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> gestionaIterator() {
        return this.<E>successorIterator(getGestionaRelationship(getMtDatabase()), gest_proyectos.Proyecto.class);
    }

    /**
     * Sets the <code>gestiona</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getGestiona
     * @see #getGestionaSize
     * @see #gestionaIterator
     * @see #removeGestiona
     */
    public final void setGestiona(gest_proyectos.Proyecto[] succs) {
        setSuccessors(getGestionaRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>gestiona</code> successors list.
     * @param succ the object to add
     *
     * @see #getGestiona
     * @see #getGestionaSize
     * @see #gestionaIterator
     * @see #setGestiona
     * @see #removeGestiona
     */
    public final void prependGestiona(gest_proyectos.Proyecto succ) {
        prependSuccessor(getGestionaRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>gestiona</code> successors list.
     * @param succ the object to add
     *
     * @see #getGestiona
     * @see #setGestiona
     * @see #removeGestiona
     * @see #getGestionaSize
     * @see #gestionaIterator
     */
    public final void appendGestiona(gest_proyectos.Proyecto succ) {
        appendSuccessor(getGestionaRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>gestiona</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getGestiona
     * @see #setGestiona
     * @see #removeGestiona
     * @see #getGestionaSize
     * @see #gestionaIterator
     */
    public final void appendGestiona(gest_proyectos.Proyecto[] succs) {
        addSuccessors(getGestionaRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>gestiona</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getGestiona
     * @see #setGestiona
     * @see #getGestionaSize
     * @see #gestionaIterator
     */
    public void removeGestiona(gest_proyectos.Proyecto[] succs) {
        removeSuccessors(getGestionaRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>gestiona</code> successors list.
     * @param succ the object to remove
     *
     * @see #getGestiona
     * @see #setGestiona
     * @see #getGestionaSize
     * @see #gestionaIterator
     */
    public void removeGestiona(gest_proyectos.Proyecto succ) {
        removeSuccessor(getGestionaRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>gestiona</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearGestiona() {
        clearSuccessors(getGestionaRelationship(getMtDatabase()));
    }


    /*
     * Index access methods
     */

    /* Index 'EmpleadoPlantilla_i_dni' */

    /** Index <code>EmpleadoPlantilla_i_dni</code> cache ID */
    private static int empleadoPlantilla_i_dniIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("gest_proyectos.EmpleadoPlantilla_i_dni"));

    /**
     * Gets the <code>EmpleadoPlantilla_i_dni</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getEmpleadoPlantilla_i_dniIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(empleadoPlantilla_i_dniIndexCID);
    }

    /**
     * Finds one <code>EmpleadoPlantilla</code> object in index <code>EmpleadoPlantilla_i_dni</code>.
     * @param db a database
     * @param dni search parameter
     * @return the matching <code>EmpleadoPlantilla</code> object or <code>null</code> if none was found
     */
    public static EmpleadoPlantilla lookupEmpleadoPlantilla_i_dni(com.matisse.MtDatabase db, String dni) {
        return (EmpleadoPlantilla)getEmpleadoPlantilla_i_dniIndex(db).lookup(new Object[] {dni}, getClass(db));
    }

    /**
     * Finds <code>EmpleadoPlantilla</code> objects in index <code>EmpleadoPlantilla_i_dni</code>.
     * @param db a database
     * @param dni search parameter
     * @return the matching <code>EmpleadoPlantilla</code> objects or an empty array if none was found
     */
    public static EmpleadoPlantilla[] lookupObjectsEmpleadoPlantilla_i_dni(com.matisse.MtDatabase db, String dni) {
        return (EmpleadoPlantilla[])getEmpleadoPlantilla_i_dniIndex(db).lookupObjects(new Object[] {dni}, getClass(db), EmpleadoPlantilla.class);
    }

    /**
     * Opens an iterator on index <code>EmpleadoPlantilla_i_dni</code> for class <code>EmpleadoPlantilla</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromDni search parameter
     * @param toDni search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> empleadoPlantilla_i_dniIterator(com.matisse.MtDatabase db, String fromDni, String toDni) {
        return getEmpleadoPlantilla_i_dniIndex(db).<E>iterator(new Object[] {fromDni}, new Object[] {toDni}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, EmpleadoPlantilla.class);
    }

    /**
     * Opens an iterator on index <code>EmpleadoPlantilla_i_dni</code> for class <code>EmpleadoPlantilla</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromDni search parameter
     * @param toDni search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> empleadoPlantilla_i_dniIterator(com.matisse.MtDatabase db, String fromDni, String toDni, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getEmpleadoPlantilla_i_dniIndex(db).iterator(new Object[] {fromDni}, new Object[] {toDni}, filterClass, direction, numObjPerBuffer, EmpleadoPlantilla.class);
    }

    /* Index 'EmpleadoPlantilla_i_nom_emp' */

    /** Index <code>EmpleadoPlantilla_i_nom_emp</code> cache ID */
    private static int empleadoPlantilla_i_nom_empIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("gest_proyectos.EmpleadoPlantilla_i_nom_emp"));

    /**
     * Gets the <code>EmpleadoPlantilla_i_nom_emp</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getEmpleadoPlantilla_i_nom_empIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(empleadoPlantilla_i_nom_empIndexCID);
    }

    /**
     * Finds one <code>EmpleadoPlantilla</code> object in index <code>EmpleadoPlantilla_i_nom_emp</code>.
     * @param db a database
     * @param nom_emp search parameter
     * @return the matching <code>EmpleadoPlantilla</code> object or <code>null</code> if none was found
     */
    public static EmpleadoPlantilla lookupEmpleadoPlantilla_i_nom_emp(com.matisse.MtDatabase db, String nom_emp) {
        return (EmpleadoPlantilla)getEmpleadoPlantilla_i_nom_empIndex(db).lookup(new Object[] {nom_emp}, getClass(db));
    }

    /**
     * Finds <code>EmpleadoPlantilla</code> objects in index <code>EmpleadoPlantilla_i_nom_emp</code>.
     * @param db a database
     * @param nom_emp search parameter
     * @return the matching <code>EmpleadoPlantilla</code> objects or an empty array if none was found
     */
    public static EmpleadoPlantilla[] lookupObjectsEmpleadoPlantilla_i_nom_emp(com.matisse.MtDatabase db, String nom_emp) {
        return (EmpleadoPlantilla[])getEmpleadoPlantilla_i_nom_empIndex(db).lookupObjects(new Object[] {nom_emp}, getClass(db), EmpleadoPlantilla.class);
    }

    /**
     * Opens an iterator on index <code>EmpleadoPlantilla_i_nom_emp</code> for class <code>EmpleadoPlantilla</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromNom_emp search parameter
     * @param toNom_emp search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> empleadoPlantilla_i_nom_empIterator(com.matisse.MtDatabase db, String fromNom_emp, String toNom_emp) {
        return getEmpleadoPlantilla_i_nom_empIndex(db).<E>iterator(new Object[] {fromNom_emp}, new Object[] {toNom_emp}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, EmpleadoPlantilla.class);
    }

    /**
     * Opens an iterator on index <code>EmpleadoPlantilla_i_nom_emp</code> for class <code>EmpleadoPlantilla</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromNom_emp search parameter
     * @param toNom_emp search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> empleadoPlantilla_i_nom_empIterator(com.matisse.MtDatabase db, String fromNom_emp, String toNom_emp, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getEmpleadoPlantilla_i_nom_empIndex(db).iterator(new Object[] {fromNom_emp}, new Object[] {toNom_emp}, filterClass, direction, numObjPerBuffer, EmpleadoPlantilla.class);
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public EmpleadoPlantilla(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[EmpleadoPlantilla]";
    }
}
